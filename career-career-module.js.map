{"version":3,"sources":["webpack:///./src/app/career/career.component.css","webpack:///./src/app/career/career.component.html","webpack:///./src/app/career/career.component.ts","webpack:///./src/app/career/career.module.ts","webpack:///./src/app/career/home/career-home.component.css","webpack:///./src/app/career/home/career-home.component.html","webpack:///./src/app/career/home/career-home.component.ts","webpack:///./src/app/career/position/career-position.component.css","webpack:///./src/app/career/position/career-position.component.html","webpack:///./src/app/career/position/career-position.component.ts"],"names":[],"mappings":"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","file":"career-career-module.js","sourcesContent":["module.exports = \"#title {\\r\\n    height: 400px;\\r\\n    padding-top: 150px;\\r\\n}\\r\\n\\r\\n@media only screen and (max-width: 767px) {\\r\\n  #title {\\r\\n    height: 300px;\\r\\n  }\\r\\n}\\r\\n\\r\\n#title > h1 {\\r\\n    text-align: center;\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n.container {\\r\\n    margin-bottom: 50px;\\r\\n}\\r\\n\"","module.exports = \"\\n\\n<div id=\\\"title\\\" class=\\\"col-xs-12\\\" [ngStyle]=\\\"{ 'background': 'url(' + careerPage?.titleImage + ') no-repeat fixed center',\\n     'background-size': careerPage?.titleImage ? 'cover': ''}\\\">\\n  <h1>{{ careerPage?.title }}</h1>\\n</div>\\n\\n<div class=\\\"container\\\">\\n  <router-outlet></router-outlet>\\n</div>\\n  \\n\"","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {TranslateService} from '@ngx-translate/core';\n\nimport {IPageContain} from '../page-contain';\n\nimport {Observable} from 'rxjs/Observable';\n/**\n * Component corresponding to the Career page\n */\n@Component({\n  styleUrls: ['./career.component.css'],\n  templateUrl: './career.component.html'\n})\nexport class CareerComponent implements OnInit {\n\n  /**\n   * This variable contains all the contents of all the pages loaded inside the pageContain.json file\n   */\n  public pages: Observable<IPageContain[]>;\n\n  /**\n   * This variable contains the content of the Career page\n   */\n  public careerPage: IPageContain;\n\n  /**\n   * this variable contains the language parameter in the URL\n   */\n  public lang: string;\n\n  /**\n   * This function represents the constructor of our class, its role is to create a service object used for page contain acquisition\n   */\n  constructor(public dataService: TranslateService,\n              private route: ActivatedRoute,\n              private router: Router) {\n  }\n\n  /**\n   * This function is called during the initialization of our component to load the content of the page into the variables defined above.\n   */\n  public ngOnInit() {\n    /**\n     * this statement retrieves the language parameter in the URL\n     */\n    this.route.paramMap.subscribe(pmap => this.lang = pmap.get('lang'));\n\n    /**\n     * this instruction retrieves the contents of the pages\n     */\n    this.pages = this.dataService.getTranslation('pageContain_' + this.lang);\n\n    this.dataService.getTranslation('pageContain_' + this.lang).subscribe(pages => {\n                        this.careerPage = pages.filter((page: IPageContain) =>\n                          page.id === 'career')[0];\n            });\n    if (this.route.firstChild == null) {\n      this.router.navigate(['/career', this.lang, 'careerHome', this.lang]);\n    }\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router';\n\nimport {CareerComponent} from './career.component';\nimport {CareerHomeComponent} from './home/career-home.component';\nimport {CareerPositionComponent} from './position/career-position.component';\n\n@NgModule({\n  declarations: [\n    CareerComponent,\n    CareerHomeComponent,\n    CareerPositionComponent\n  ],\n  imports: [\n    RouterModule.forChild([\n      {\n        path: ':lang',\n        // tslint:disable-next-line:object-literal-sort-keys\n        component: CareerComponent,\n        children: [\n          {path: 'careerHome/:lang', component: CareerHomeComponent},\n          {path: 'position/:name/:lang', component: CareerPositionComponent}\n        ]\n      }\n    ]),\n    CommonModule\n  ],\n  providers: []\n})\nexport class CareerModule { }\n","module.exports = \"* {\\r\\n    padding: 5px;\\r\\n    margin: 1%;\\r\\n}\\r\\n\\r\\np {\\r\\n    text-align: justify;\\r\\n    margin: 0%;\\r\\n}\\r\\n\\r\\nh1 {\\r\\n    color: rgb(27, 112, 183);\\r\\n    text-align: center;\\r\\n    font-weight: bold;\\r\\n}\\r\\n\\r\\nh3 {\\r\\n    color: rgb(27, 112, 183);\\r\\n    font-weight: bold;\\r\\n}\\r\\n\\r\\n.row {\\r\\n    margin-bottom: 1%;\\r\\n}\\r\\n\\r\\n#subLink {\\r\\n    background: rgb(231, 230, 230);\\r\\n    color: rgb(102, 100, 100);\\r\\n    padding: 1% 1% 0% 2%;\\r\\n    margin-top: 0%;\\r\\n    border: 0px;\\r\\n}\\r\\n\\r\\n.col-sm-4 {\\r\\n    width: 30%;\\r\\n    margin: 0 1% 2% 2%;\\r\\n}\\r\\n\\r\\n.col-sm-4 > img {\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\n.tonkainJob .col-sm-4 {\\r\\n    margin: 0 1% 3% 2%;\\r\\n    width: 30%;\\r\\n    height: 150px;\\r\\n    border: 1px solid lightgray;\\r\\n    border-bottom: 5px solid lightgray;\\r\\n}\\r\\n\\r\\n.tonkainJob .col-sm-4 > button {\\r\\n    position: absolute;\\r\\n    bottom: 5%;\\r\\n}\\r\\n\\r\\n.tonkainJob .col-sm-4:hover {\\r\\n    background: rgb(238, 237, 237);\\r\\n    border-bottom: 5px solid rgb(27, 112, 183);\\r\\n    cursor: pointer;\\r\\n}\\r\\n\\r\\n@media (max-width: 768px) { \\r\\n    .tonkainJob .col-sm-4, .col-sm-4 {\\r\\n        margin-left: 10%;\\r\\n        width: 80%;\\r\\n    }\\r\\n}\\r\\n\"","module.exports = \"<div id=\\\"subLink\\\" class=\\\"row\\\">\\n  <p>{{ careerPage?.pageName }} </p>\\n</div>\\n\\n<div *ngFor='let category of careerPage?.category; trackBy: trackByMulti' class=\\\"row category\\\">\\n  <div class=\\\"row\\\">\\n    <h1>{{ category?.title }}</h1>\\n  </div>\\n  \\n  <div class=\\\"row\\\">\\n    <p>{{ category?.textDesc }}</p>\\n  </div>\\n  \\n  <div class=\\\"row\\\" *ngIf='category?.article'>\\n    <div *ngFor='let article of category?.article; trackBy: trackByMulti' class=\\\"col-sm-4 article\\\">\\n      <img *ngIf='article?.image[0].src' [src]='article?.image[0].src' class=\\\"img-responsive\\\" [alt]='article?.title'>\\n      <h3>{{ article?.title }}</h3>\\n      <p *ngFor='let contenu of article?.contenu; trackBy: trackByMulti'>{{ contenu }}</p>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"row tonkainJob\\\">\\n  <div *ngFor='let job of filteredjobs; trackBy: trackByMulti' class=\\\"col-sm-4\\\" [routerLink]=\\\"['/career', lang, 'position', job?.name, lang]\\\">\\n    <h3>{{ job?.name }}</h3>\\n    <br>\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" [routerLink]=\\\"['/career', lang, 'position', job?.name, lang]\\\">View position</button>\\n  </div>\\n</div>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {TranslateService} from '@ngx-translate/core';\n\nimport {IPageContain} from '../../page-contain';\nimport {IJob} from '../job';\n\nimport {Observable} from 'rxjs/Observable';\n\n/**\n * Component corresponding to the career home page\n */\n@Component({\n  selector: 'app-career-home',\n  styleUrls: ['./career-home.component.css'],\n  templateUrl: './career-home.component.html'\n})\nexport class CareerHomeComponent implements OnInit {\n  // tslint:disable:no-unused-css\n  /**\n   * This variable contains all the contents of all the pages loaded inside the pageContain.json file\n   */\n  public pages: Observable<IPageContain[]>;\n\n  /**\n   * jobs contain the list of all available jobs in the jobs.json file\n   */\n  public jobs: Observable<IJob[]>;\n\n  /**\n   * this variable contains the language parameter in the URL\n   */\n  public lang: string;\n\n  /**\n   * filteredjobs contain a group of jobs, we obtain it buy apply a filter by group to jobs\n   */\n  public filteredjobs: IJob [];\n\n  /**\n   * This variable contains the content of the Career page\n   */\n  public careerPage: IPageContain;\n\n  /**\n   * This function represents the constructor of our class,\n   * its role is to create the service objects used for data acquisition as well as a routing object to read the parameters in the URL\n   */\n  constructor(private route: ActivatedRoute,\n              private dataService: TranslateService) { }\n\n  /**\n   * This function is called to get jobs in output.\n   */\n  public ngOnInit() {\n    /**\n     * this statement retrieves the language parameter in the URL\n     */\n    this.route.paramMap.subscribe(pmap => this.lang = pmap.get('lang'));\n\n    /**\n     * this instruction retrieves the contents of the pages\n     */\n    this.jobs = this.dataService.getTranslation('jobs_' + this.lang);\n\n    this.dataService.getTranslation('jobs_' + this.lang)\n            .subscribe(jobs => {\n                        this.filteredjobs = jobs;\n            });\n    /**\n     * this instruction retrieves the contents of the pages\n     */\n    this.pages = this.dataService.getTranslation('pageContain_' + this.lang);\n\n    this.dataService.getTranslation('pageContain_' + this.lang)\n            .subscribe(pages => {\n                        this.careerPage = pages.filter((page: IPageContain) =>\n                        page.id === 'career')[0];\n            });\n  }\n\n  /**\n   * we have a problem because Angular can’t keep track of items in the collection and has no knowledge of which items have been removed or added.\n   * We can help Angular to track which items added or removed by providing a trackBy function.\n   * The trackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item\n   */\n  public trackByMulti(index, item) {\n    return index;\n  }\n\n}\n","module.exports = \"* {\\r\\n    padding: 5px;\\r\\n    margin: 0.5%;\\r\\n}\\r\\n\\r\\np {\\r\\n    text-align: justify;\\r\\n    margin: 0%;\\r\\n}\\r\\n\\r\\n#subLink {\\r\\n    background: rgb(231, 230, 230);\\r\\n    color: rgb(102, 100, 100);\\r\\n    margin: 0 0 20px 0;\\r\\n    padding: 1% 1% 0% 2%;\\r\\n    border: 0px;\\r\\n}\\r\\n\\r\\nh1 {\\r\\n    color: rgb(27, 112, 183);\\r\\n    text-align: left;\\r\\n    font-weight: bold;\\r\\n    margin-bottom: 2%;\\r\\n}\\r\\n\\r\\nh4 {\\r\\n    text-align: left;\\r\\n}\\r\\n\\r\\n.offerDesc > h4 {\\r\\n    font-weight: bold;\\r\\n}\\r\\n\\r\\n.carousel-indicators {\\r\\n    bottom: -10%;\\r\\n    margin-left: -30%;\\r\\n}\\r\\n\\r\\n.carousel-indicators > li {\\r\\n    background: black;\\r\\n}\\r\\n\\r\\n.carousel-control[data-slide=\\\"prev\\\"] {\\r\\n    left: -10%;\\r\\n    background: none;\\r\\n    color: black;\\r\\n}\\r\\n\\r\\n.carousel-control[data-slide=\\\"next\\\"] {\\r\\n    right: -10%;\\r\\n    background: none;\\r\\n    color: black;\\r\\n}\"","module.exports = \"<div *ngIf='filteredJob' id=\\\"subLink\\\" class=\\\"row\\\">\\n    <p><a [routerLink]=\\\"['/career', lang, 'careerHome', lang]\\\" routerLinkActive=\\\"active\\\">{{ careerPage?.pageName }}</a> > {{ filteredJob?.name }}</p>\\n  </div>\\n  \\n  <div *ngIf='filteredJob'>\\n    <div class=\\\"row\\\">\\n      <h1>{{ filteredJob?.name }}</h1>\\n      <h4>{{ filteredJob?.date }}</h4>\\n    </div>\\n  \\n    <div id=\\\"whoWeAre\\\" class=\\\"row offerDesc\\\">\\n      <h4>Who we are:</h4> <br>\\n      <p>{{ filteredJob?.whoWeAre }}</p>\\n    </div><br>\\n  \\n    <div id=\\\"responsibilities\\\" class=\\\"row offerDesc\\\">\\n      <h4>Position Responsibilities:</h4> <br>\\n      <ul>\\n        <li *ngFor='let responsibility of filteredJob.responsibilities; trackBy: trackByMulti'> {{ responsibility }} </li>\\n      </ul>\\n    </div>\\n  \\n    <div id=\\\"education\\\" class=\\\"row offerDesc\\\">\\n      <h4>Education and Training:</h4> <br>\\n      <ul>\\n        <li *ngFor='let education of filteredJob.education; trackBy: trackByMulti'> {{ education }} </li>\\n      </ul>\\n    </div>\\n  \\n    <div id=\\\"knowledge\\\" class=\\\"row offerDesc\\\">\\n      <h4>Knowledge:</h4> <br>\\n      <ul>\\n        <li *ngFor='let knowledge of filteredJob.knowledge; trackBy: trackByMulti'> {{ knowledge }} </li>\\n      </ul>\\n    </div>\\n  \\n    <div id=\\\"experience\\\" class=\\\"row offerDesc\\\">\\n      <h4>Experience:</h4> <br>\\n      <ul>\\n        <li *ngFor='let experience of filteredJob.experience; trackBy: trackByMulti'> {{ experience }} </li>\\n      </ul>\\n    </div>\\n  \\n    <div id=\\\"whatWeOffer\\\" class=\\\"row offerDesc\\\">\\n      <h4>What we Offer:</h4> <br>\\n      <ul>\\n        <li *ngFor='let whatWeOffer of filteredJob.whatWeOffer; trackBy: trackByMulti'> {{ whatWeOffer }} </li>\\n      </ul>\\n    </div><br>\\n  \\n    <div id=\\\"deathLines\\\" class=\\\"row offerDesc\\\">\\n      <p>{{ filteredJob?.deathLines }}</p>\\n    </div>\\n  \\n  </div>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {TranslateService} from '@ngx-translate/core';\n\nimport {IPageContain} from '../../page-contain';\nimport {IJob} from './../job';\n\nimport {Observable} from 'rxjs/Observable';\n\n/**\n * Component corresponding to the job details page of Career\n */\n@Component({\n  styleUrls: ['./career-position.component.css'],\n  templateUrl: './career-position.component.html'\n})\nexport class CareerPositionComponent implements OnInit {\n    /**\n     * This variable contains all the contents of all the pages loaded inside the pageContain.json file\n     */\n  public pages: Observable<IPageContain[]>;\n\n  /**\n   * This variable contain the list of all available jobs in the jobs.json file\n   */\n  public jobs: Observable<IJob[]>;\n\n  /**\n   * this variable contains the language parameter in the URL\n   */\n  public lang: string;\n\n  /**\n   * filteredJob contain a specific job, we obtain it buy apply a filter by name to jobs\n   */\n  public filteredJob: IJob;\n\n  /**\n   * This variable contains the content of the Career page\n   */\n  public careerPage: IPageContain;\n\n  /**\n   * This function represents the constructor of our class,\n   * its role is to create the service objects used for data acquisition as well as a routing object to read the parameters in the URL\n   */\n  constructor(private route: ActivatedRoute,\n              private dataService: TranslateService) { }\n\n  /**\n   * On intialization of the component, we first load all data inside the jobs.json and then filtering them to have a single job\n   * after it, we will display our job specification in the template.\n   */\n  public ngOnInit() {\n    /**\n     * this statement retrieves the language parameter in the URL\n     */\n    this.route.paramMap.subscribe(pmap => this.lang = pmap.get('lang'));\n    /**\n     * this statement retrieves the parameter in the URL\n     */\n    // const name = this.route.snapshot.paramMap.get('name');\n    let urlParam;\n    this.route.paramMap.subscribe(pmap => urlParam = pmap.get('name'));\n\n    /**\n     * this instruction retrieves the contents of the pages\n     */\n    this.jobs = this.dataService.getTranslation('jobs_' + this.lang);\n\n    this.dataService.getTranslation('jobs_' + this.lang)\n            .subscribe(jobs => {\n                        this.filteredJob = jobs.filter((job: IJob) =>\n                        job.name === urlParam)[0];\n            });\n    /**\n     * this instruction retrieves the contents of the pages\n     */\n    this.pages = this.dataService.getTranslation('pageContain_' + this.lang);\n\n    this.dataService.getTranslation('pageContain_' + this.lang)\n            .subscribe(pages => {\n                        this.careerPage = pages.filter((page: IPageContain) =>\n                        page.id === 'career')[0];\n            });\n  }\n\n  /**\n   * we have a problem because Angular can’t keep track of items in the collection and has no knowledge of which items have been removed or added.\n   * We can help Angular to track which items added or removed by providing a trackBy function.\n   * The trackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item\n   */\n  public trackByMulti(index, item) {\n    return index;\n  }\n\n}\n"],"sourceRoot":""}